<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NSGuy]]></title>
  <link href="http://nsguy.com/atom.xml" rel="self"/>
  <link href="http://nsguy.com/"/>
  <updated>2014-06-03T23:59:29+08:00</updated>
  <id>http://nsguy.com/</id>
  <author>
    <name><![CDATA[John]]></name>
    <email><![CDATA[songyingxinok@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift 与Cocoa的交互]]></title>
    <link href="http://nsguy.com/blog/2014/06/03/swift-yu-cocoade-jiao-hu/"/>
    <updated>2014-06-03T23:34:44+08:00</updated>
    <id>http://nsguy.com/blog/2014/06/03/swift-yu-cocoade-jiao-hu</id>
    <content type="html"><![CDATA[<p>  Swift 与 Objective-C 之间存在互通性，你可以在同一个文件中访问并使用另一种语言的代码。当你开始在开发app中使用Swift语言的时候，理解如何平衡这种互通性在重新定义，改善，或者是增强代码的时候是非常有益处的。</p>

<p>另外一个非常重要的方面是互通性能够使你在写Swift的时候使用Objective-C 的API，在导入Objective-C的框架之后，你可以使用Swift的语法实例化一个类并与之交互。</p>

<h4 id="section">初始化</h4>

<p>  要使用Swift初始化一个Objecive-C的类，只需要使用Swift的语法调用这个类的其中一个构造函数。当一个Objective-C的init方法过渡到Swift时，它不需要本地的Swift初始化语句。init这个前缀是一个关键字，它能决定一个方法是否为初始化方法。例如一个初始化方法以”initWith”开头，”With”将会被切掉，含有”init”或者”initWith”的每一个selector将会变成小写的，其后的每一个selector依次变成参数名，并在圆括号内调用。</p>

<p>例如，当使用Objective-C时你会这样做：</p>

<pre><code>UITableView *myTableView = [[UITableView alloc] initWithFrame:CGRectZero style:UITableViewStyleGrouped];
</code></pre>

<p>而使用Swift时：</p>

<pre><code>let myTableView: UITableView = UITableView(frame: CGRectZero, style: .Grouped)
</code></pre>

<p>你不再需要调用alloc，Swift能替你实现。注意当使用Swift风格的初始化函数的时候，”init”并没有出现。</p>

<p>你可以在初始化时显式的声明对象的类型，也可以省略它，Swift能够正确判断对象的类型。</p>

<pre><code>let myTextField = UITextField(frame: CGRect(0.0, 0.0, 200.0, 40.0))
</code></pre>

<p>  上述的UITableView与UITextField与你在Objective-C时的功能完全一致，你可以用一样的方式使用他们，包括访问属性或者调用各自的类中的方法。</p>

<p>  为了连贯与统一，Objective-C中的工厂方法也在Swift中映射为简单方便的初始化方法，这种映射能够让他们使用同样简单，清晰的初始化方法，例如，在Objective-C中你可能这样调用一个类方法：</p>

<pre><code>UIColor *color = [UIColor colorWithRed:0.5 green:0.0 blue:0.5 alpha:1.0];
</code></pre>

<p>在Swift中，你可以这样做：</p>

<pre><code>let color = UIColor(red: 0.5, green: 0.0, blue: 0.5, alpha: 1.0)
</code></pre>

<h4 id="section-1">访问属性</h4>

<p>两种语言都使用点操作符来访问与设置属性</p>

<pre><code>myTextField.textColor = UIColor.darkGrayColor()
myTextField.text = "Hello world"
if myTextField.editing {
	myTextField.editing = false
}
</code></pre>

<p>  当访问或设置属性之时，直接使用属性名称，不需要增加圆括号。你发现darkGrayColor后面跟了一对圆括号，这是因为darkGrayColor是UIColor的类方法，而不是一个属性。</p>

<p>  在Objective-C时代，一个有返回值的无参方法可以被作为一个隐式的访问函数，并且可以与访问器使用同样的方法调用。但在Swift中不再能够这样做了，在Swift时代，只有使用@property关键字声明的属性才会被作为属性引入。</p>

<h4 id="section-2">方法</h4>

<p>  当在Swift调用Objective-C方法时，使用点操作符。</p>

<p>  Objective-C中的方法转换到Swift时，Objective-C的选择器的第一部分将会成为方法名并出现在圆括号的前面，而第一个参数将直接在括号中出现，并且没有名字，而剩下的参数名与参数则一一对应的填入圆括号中。</p>

<p>例如在调用Objective-C方法时：</p>

<pre><code>[myTableView insertSubview:mySubview atIndex:2];
</code></pre>

<p>而在Swift中</p>

<pre><code>myTableView.insertSubview(mySubview, atIndex: 2)
</code></pre>

<p>如果你调用一个无参函数，你仍需要在名称后面加上一对圆括号</p>

<pre><code>myTableView.layoutIfNeeded()
</code></pre>

<h4 id="id-">id 兼容性</h4>

<p>  Swift包含一个叫做 AnyObject 的协议类型，可以表示所有的对象。就好像Objective-C中的id.AnyObject 协议可以让你写出类型安全的代码的同时维持无类型对象的通用性。因为AnyObject协议保证了这种安全，Swift将id对象导入为AnyObject.</p>

<p>  例如，与id一样，你可以为AnyObject类型的对象分配任何其他类型的对象，你也同样可以为它重新分配其他类型的对象。</p>

<pre><code>var myObject: AnyObject = UITableViewCell()
myObject = NSDate()
</code></pre>

<p>  你也可以同样在调用Objective-C方法或者访问属性时不将它转换为具体类的类型。包括Objcive-C中标记为@objc的方法。</p>

<pre><code>let futureDate = myObject.dateByAddingTimeInterval(10)
let timeSinceNow = myObject.timeIntervalSinceNow
</code></pre>

<p>  然而，因为AnyObject对象的类型只有在运行时才能知道，所以我们不经意间，就写出了不安全的代码。另外，与Objective-C不一样的是，如果你调用方法或者访问的属性AnyObject 对象没有声明，将会报运行时错误。例如，下面的代码将会在运行时抛出unrecognized selector error 。</p>

<pre><code>myObject.characterAtIndex(5)
// crash, myObject does't respond to that method
</code></pre>

<p>  尽管如此，你也可以借助Swift的optionals特性来排除这个Objective-C中常见的错误，当你用AnyObject对象调用一个Objective-C的方法，这次调用将会变成一次隐式展开optional（implicitly unwrapped optional）的行为。你可以通过optional特性来决定AnyObject类型的对象是否调用该方法，同样的，你可以把这种特性应用在属性上。</p>

<p>  例如，在下面的代码中，第一行与第二行并不会执行，因为NSDate 对象并没有声明<code>length</code>属性<code>与characterAtIndex:</code> 方法。myLength将被推测为一个可选的Int类型，并且被设置成为nil。你可以使用<code>if-let</code>声明来有条件的展开这个方法的返回值，从而判断对象是否能执行这个方法。就像第三行做的一样。</p>

<pre><code>let myLength = myObject.length?
let myChar = myObject.characterAtIndex?(5)
if let fifthCharacter = myObject.characterAtIndex(5) {
    println("Found \(fifthCharacter) at index 5")
}
</code></pre>

<p>而对于Swift中的强制类型转换，从AnyObject类型的对象转换成更明确的类型并不会保证完全成功，所以它会返回一个可选的值。而你需通过检查该值的类型来确认转换是否成功。</p>

<pre><code>let userDefaults = NSUserDefaults.standardUserDefaults()
let lastRefreshDate: AnyObject? = userDefaults.objectForKey("LastRefreshDate")
if let date = lastRefreshDate as? NSDate {
	println("\(date.timeIntervalSinceReferenceDate)")
}
</code></pre>

<p>当然，如果你能够确定这个对象的类型(并且它不是nil)，你可以加上一个as操作符强制调用。</p>

<pre><code>let myDate = lastRefreshDate as NSDate
let timeInterval = myDate.timeIntervalSinceReferenceDate
</code></pre>

<h4 id="nil">使用nil</h4>

<p>  在Objective-C时代，对象的引用可以使值为NULL的原始指针（同样也是Objective-C中的nil）。而在Swift中，所有的值–包括结构体与对象的引用–都被保证为非空。作为替代，你将这个可以为空的值包装为optional type。当你需要指示该值为空，你需要使用nil,你可以阅读更多<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5">关于Optionals</a>的内容</p>

<p>  因为Objective-C不会保证一个对象的值是否非空，Swift在引入Objective-C的API的时候，确保了所有函数的返回类型与参数类型都是optional，在使用Objective-C API之前，你应该检查并保证该值非空。</p>

<p>  在某些情况下，你可能绝对确认某些Objective-C方法或者属性永远不应该返回一个nil的对象引用。为了让对象在这种情况下更加易用，Swift使用 implicitly unwrapped optionals 方法引入对象， implicitly unwrapped optionals 包含optional 类型的所有安全特性。此外，你可以直接访问对象的值而无需检查nil。当你访问这种类型的变量时， implicitly unwrapped optional 首先检查这个对象的值是否不存在，如果不存在，将会抛出运行时错误。</p>

<h4 id="extensions">扩展 Extensions</h4>

<p>  一个Swift的扩展与Objective-C的类别很相似，扩展可以为原来的类增加方法，结构体，枚举，包括在Objective-C中定义过的。你可以为系统的框架或者你自己的类型增加扩展，只需要简单的引入合适的组件。</p>

<p>  比如，你可以通过扩展UIBezierPath类来为它增加一个等边三角形，这个方法只需提供三角形的边长与起点。</p>

<pre><code>extension UIBezierPath {
	convenience init(triangleSideLength: Float, origin: CGPoint) {
  	  	self.init()
    	let squareRoot = Float(sqrt(3))
        let altitude = (squareRoot * triangleSideLength) / 2
	    moveToPoint(origin)
    	addLineToPoint(CGPoint(triangleSideLength, origin.x))
        addLineToPoint(CGPoint(triangleSideLength / 2, altitude))
	    closePath()
   		}
}
</code></pre>

<p>  你也可以使用扩展来增加属性（包括类的属性与静态属性）。然而，这些属性必须是通过计算才能获取的，扩展不会为类，结构体，枚举存储属性。下面这个例子为CGRect类增加了一个叫area的属性</p>

<pre><code>extension CGRect {
	var area: CGFloat {
		return width * height
	}
}
	let rect = CGRect(x: 0.0, y: 0.0, width: 10.0, height: 50.0)
	let area = rect.area
	// area: CGFloat = 500.0
</code></pre>

<p>你可以使用扩展来为类添加协议而无需增加它的子类。你不能使用扩展来覆盖Objective-C类型中存在的方法与属性。</p>

<h4 id="closures">闭包Closures</h4>

<p>  Objective-C 中的blocks会被自动引入为Swift 中的闭包。例如，下面是一个Objective-C 中的block 变量</p>

<pre><code>void (^completionBlock)(NSData *, NSError *) = ^(NSData *data, NSError *error) {/* ... */}
</code></pre>

<p>而它在Swift中的形式为</p>

<pre><code>let completionBlock: (NSData, NSError) -&gt; Void = {data, error in /* ... */}
</code></pre>

<p>  Swift的闭包与Objective-C中的blocks能够和睦相处，所以你可以把一个Swift闭包传递给一个把block作为参数的Objective-C函数。Swift闭包与函数具有互通的类型，所以你甚至可以传递Swift函数的名字。</p>

<p>  闭包与blocks语义上想通但是在一个地方不同：变量是可以直接改变的，而不是像block那样会拷贝变量。换句话说，Swift中变量的默认行为与Objective-C中__block变量一致。</p>

<h4 id="object-comparison">比较对象Object Comparison</h4>

<p>  当比较两个Swift中的对象时，可以使用两种方式。第一种，使用（==），判断两个对象内容是否相同。第二种，使用(===),判断常量或者变量是否为同一个对象的实例。</p>

<p>  Swift与Objective-C一般使用 == 与 === 操作符来做比较。Swift的==操作符为源自NSObject的对象提供了默认的实现。在实现 == 操作符时，Swift调用 NSObject定义的 isEqual: 方法。NSObject类仅仅做了身份的比较，所以你需要在你自己的类中重新实现isEqual:方法。因为你可以直接传递Swift对象给Objective-C的API,你也应该为这些对象实现自定义的isEqual:方法，如果你希望比较两个对象的内容是否相同而不是仅仅比较他们是不是由相同的对象派生。</p>

<p>  作为实现比较函数的一部分，确保根据<a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/DevPedia-CocoaCore/ObjectComparison.html#//apple_ref/doc/uid/TP40008195-CH37">Object comparison</a>实现对象的hash属性。更进一步的说，如果你希望你的类能够作为字典中的键，也需要遵从Hashable协议以及实现hashValues属性。</p>

<h4 id="swift-type-compatibility">Swift Type Compatibility</h4>

<p>  当你定义了一个继承自NSObject 或者其他Objective-C 类的Swift类，这些类都能与Objective-C无缝连接。所有的步骤都有Swift编译器自动完成，如果你从未在Objective-C代码中导入Swift 类，你也不需要担心类型适配问题。另外一种情况，如果你的Swift类并不来源自Objectve-C类而且你希望能在Objecive-C的代码中使用它，你可以使用下面描述的@objc属性。</p>

<p>  @objc 可以让你的Swift API在Objective-C 与 runtime 中使用。换句话说，你可以通过在任何Swift方法、类、属性前添加@objc，来使得他们可以在Objective-C 代码中使用。如果你的类继承自Objective-C,编译器会自动帮助你完成这一步。编译器还会在所有的变量、方法、属性前加@objc，如果这个类自己前面加上了@objc关键字。当你使用@IBOutlet,@IBAction,或者是@NSManaged ，@objc也会自动加在前面。这个关键字也可以用在Objetive-C中的 target-action 设计模式中，例如，NSTimer或者UIButton。</p>

<p>  当你在Objective-C中使用Swift API，编译器基本对语句做直接的翻译。例如，<code>Swift API func playSong(name: String)</code> 会被解释为 <code>- (void)playSong:(NSString *)name</code> 。然而，有一个例外：当在Objective-C中使用Swift的初始化函数，编译器会在方法前添加”initWith”并且将原初始化函数的第一个参数首字母大写。例如，这个Swift初始化函数</p>

<pre><code>init (songName: String, artist: String 
</code></pre>

<p>将被翻译为</p>

<pre><code> - (instancetype)initWithSongName:(NSString *)songName artist:(NSString *)artist
</code></pre>

<p>  Swift 同时也提供了一个@objc关键字的变体，通过它你可以自定义在Objectiv-C中转换的函数名。例如，如果你的Swift 类的名字包含Objecytive-C中不支持的字符，你就可以为Objective-C提供一个可供替代的名字。如果你给Swift函数提供一个Objcetiv-C 名字，要记得为带参数的函数添加（:）</p>

<pre><code>@objc(Squirrel)
class Белка {
	@objc(initWithName:)
	init (имя: String) { /*...*/ }
	@objc(hideNuts:inTree:)
   		func прячьОрехи(Int, вДереве: Дерево) { /*...*/ }
}
</code></pre>

<p>  当你在Swift类中使用@objc(&lt;#name#&gt;)关键字，这个类可以不需要命名空间即可在Objective-C中使用。这个关键字在你迁徙Objecive-C代码到Swift时同样也非常有用。由于归档过的对象存贮了类的名字，你应该使用 @objc(&lt;#name#&gt;) 来声明与旧的归档过的类相同的名字，这样旧的类才能被新的Swift类解档。</p>

<h4 id="objective-c-selectors">Objective-C Selectors</h4>

<p>  一个Objective-C 选择器类型指向一个Objective-C的方法名。在Swift时代， Objective-C 的选择器被Selector结构体替代。你可以通过字符串创建一个选择器，比如 </p>

<pre><code>let mySelector: Selector = "tappedButton:"
</code></pre>

<p>由于字符串能够自动转换为选择器，所以你可以把字符串直接传递给接受选择器的方法。</p>

<pre><code>import UIKit
class MyViewController: UIViewController {
	let myButton = UIButton(frame: CGRect(x: 0, y: 0, width: 100, height: 50))

	init(nibName nibNameOrNil: String!, bundle nibBundleOrNil: NSBundle!) {
    	super.init(nibName: nibName, bundle: nibBundle)
    	myButton.targetForAction("tappedButton:", withSender: self)
	}

	func tappedButton(sender: UIButton!) {
    	println("tapped button")
	}
}
</code></pre>

<p>如果你的Swift类继承自Objective-C,你的所有方法都可以用作Objective-C的选择器。另外，如果你的Swift类并未继承自Objective-C,你需要在方法前面加上@objc 关键字。<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-XID_36">更多参考</a></p>

<hr />
<p>从上面看出在项目中使用Swift是不难的，苹果已经为开发者做好了准备，而且对于熟悉Cocoa框架的人也是非常容易上手。所以我认为自己应该积极接受这个变化，并且视为一种机遇。</p>

<p><a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-XID_26">原文链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreData并发处理]]></title>
    <link href="http://nsguy.com/blog/2014/02/09/learning-core-data/"/>
    <updated>2014-02-09T13:44:08+08:00</updated>
    <id>http://nsguy.com/blog/2014/02/09/learning-core-data</id>
    <content type="html"><![CDATA[<p>CoreData 怎么处理多线程的问题呢，自从iOS 5.0 以后， 苹果给CoreData 添加了一些新的API，但是由于从前对于UI层面关注比较多，底层的东西关注过少，导致到现在才开始重新看CoreData这块的内容。</p>

<p>iOS 5.0 苹果为CoreData的并发处理添加了两个内容。</p>

<p><strong>首先介绍第一个：</strong></p>

<pre><code>- (id)initWithConcurrencyType:(NSManagedObjectContextConcurrencyType)ct
</code></pre>

<p>NSManagedObjectContextConcurrencyType 一共有三种:</p>

<ul>
  <li>NSConfinementConcurrencyType</li>
  <li>NSPrivateQueueConcurrencyType</li>
  <li>NSMainQueueConcurrencyType</li>
</ul>

<p><code>NSConfinementConcurrencyType</code>：每一条线程只能有唯一的一个ManagedObjectContext的模式。与此相对应，苹果的官方文档给出了两种解决并发问题的方案：</p>

<ol>
  <li>
    <p>Create a separate managed object context for each thread and share a single persistent store coordinator. This is the typically-recommended approach.</p>
  </li>
  <li>
    <p>Create a separate managed object context and persistent store coordinator for each thread. This approach provides for greater concurrency at the expense of greater complexity (particularly if you need to communicate changes between different contexts) and increased memory usage.</p>
  </li>
</ol>

<p><code>NSPrivateQueueConcurrencyType</code> 与 <code>NSMainQueueConcurrencyType</code>:分别对应绑定一个后台线程与主线程。可以使用performBlock:开执行原来需要使用dispatch_async封装的代码.</p>

<p><code>NSConfinementConcurrencyType</code>不能执行<code>performBlock</code>:.</p>

<p><strong>第二个内容： Nested ManagedObjectContext</strong></p>

<blockquote>
  <p>Nested contexts allow you to set up a managed object context so that it 	accesses data from a parent context instead of from a persistent store. If 	you request an object from a managed object context that has a parent 	context, Core Data will first look in the parent. If the parent context has 	that object in memory, you’ll get a new managed object just like that one. 	So if there are changes in the parent, you’ll get the changed version of 	the object. If the object doesn’t exist in that context, it will keep going 	up through parent contexts until it finally fetches the data from the 	persistent store.</p>
</blockquote>

<p>也就是说，当子Context中做保存操作时，因为子context没有persistentStoreCoordinator ，这个变化会首先推送给他的父context，这个操作将一直传递，直到找到没有父Context的RootContext为止，当rootContext收到这个消息的时候，rootContext自动合并了这次操作，并且做了最终的保存。所以子context查找时，同样也会首先从父context那里查找而不是直接与persistentStoreCoordinator交流。当使用这种结构时，不需要特别去监听NSManagedObjectContextObjectsDidChangeNotification 来合并异步操作到主线程，这也是这种结构的方便之处。</p>

<p>对于这种结构，我找到了来自Florian Kugler的几种并发策略:</p>

<p><strong>策略一 :</strong></p>

<p>同样使用了Nested ManagedObjectContext,但是使用了PrivateQueue作为主Context。对于Worker Context作操作将会经由MainQueue Context 最终由MasterContext合并。这个方案的好处在于Worker Context都是临时工，不需要考虑他们的生命周期。另外的一个好处是，由于他们不能自动获取到来自父亲的更新，所以这个任务可以再未完成之前随时取消。</p>

<p><strong>关于死锁</strong></p>

<p>无论何时只要对PersistentStoreCoordinator做写的操作都会造成死锁，但是这个方案的一个好处在于，如果只是做读的操作，是从内存中的，所以不会造成死锁。但是死锁的问题还是要考虑进去的。</p>

<p><img src="http://static.squarespace.com/static/5159eb3de4b01cd3b022715d/t/517e6219e4b0f470ac92f51a/1367237146374/stack%202.png?format=500w" alt="策略一" /></p>

<p>示例：</p>

<pre><code>- (NSManagedObjectContext *)mainThreadContext{
	if (!_mainThreadContext) {
    	_mainThreadContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSMainQueueConcurrencyType];
    	_mainThreadContext.parentContext = [self backgroundContext];
	}
    return _mainThreadContext;
}

- (NSManagedObjectContext *)backgroundContext{
    if (!_backgroundObjectContext) {
        _backgroundObjectContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSPrivateQueueConcurrencyType];
        [_backgroundObjectContext setPersistentStoreCoordinator:_storeCoordinator];
        
    }
    return _backgroundObjectContext;
}

- (NSManagedObjectContext *)temporaryContext{
    NSManagedObjectContext *temporaryContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSPrivateQueueConcurrencyType];
    temporaryContext.parentContext = [self mainThreadContext];
    return temporaryContext;
}
</code></pre>

<p><strong>策略二 :</strong></p>

<p>传统的方式，两个线程都使用同一个持久化存取器，不使用嵌套的结构，而使用<code>NSManagedObjectContextObjectsDidChangeNotification</code>合并来自其他线程的变化。这种方法处理起来要注意几点</p>

<p>每一条线程都应该是一个独立的<code>ManagedObjectContext</code>
监听<code>NSManagedObjectContextObjectsDidChangeNotification</code> 时，应该传递context，因为系统也可能会发送通知。</p>

<pre><code> [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(managedObjectContextDidChanged:) name:NSManagedObjectContextObjectsDidChangeNotification object:objectContext];
</code></pre>

<p><img src="http://static.squarespace.com/static/5159eb3de4b01cd3b022715d/t/517e6235e4b01510f836b35d/1367237173926/stack%203.png?format=750w" alt="策略二" /></p>

<p>三种策略都可以处理CoreData 并发的问题，有些人比较推崇的是第一个方案，但是同时Florian Kugler经过测试发现当读取大量的数据时，策略二花费的总时间与在主线程花费的时间最少。详细原因可以阅读下面的文章。我觉得关于到底采取哪种方案还是通过自己的实践来。</p>

<p>参考</p>

<ul>
  <li><a href="http://www.cocoanetics.com/2012/07/multi-context-coredata/">Multi Context CoreData</a></li>
  <li><a href="http://floriankugler.com/blog/2013/4/29/concurrent-core-data-stack-performance-shootout">Concurrent Core Data Stack Perforamnce Shoot Out</a></li>
  <li><a href="http://floriankugler.com/blog/2013/5/11/backstage-with-nested-managed-object-contexts">Backstahe with nested managed object contexts</a></li>
  <li><a href="http://wbyoung.tumblr.com/post/27851725562/core-data-growing-pains">Core Data Growing Pain</a></li>
  <li><a href="http://www.cocoanetics.com/2013/02/zarra-on-locking/">CoreData Locking</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[起源]]></title>
    <link href="http://nsguy.com/blog/2013/12/07/%E5%8A%9B%E9%87%8F%E7%9A%84%E8%B5%B7%E6%BA%90/"/>
    <updated>2013-12-07T14:41:40+08:00</updated>
    <id>http://nsguy.com/blog/2013/12/07/力量的起源</id>
    <content type="html"><![CDATA[<p>我喜欢游戏，喜欢8-bit，喜欢吉他，喜欢好的设计，希望这里将是我分享的一个好的起点。<br />
Octopress + Github Pages 是一个搭建私人博客的比较hack的方式，就像Octopress介绍自己说的：<code>A blogging framework for hackers</code>!</p>

<h2 id="ruby">搭建Ruby环境</h2>
<p>使用RVM（Ruby Version Manager）来负责安装与管理Ruby的环境。在做这一切之前，先安装好Homebrew能解决很多<code>command not found</code>的问题</p>

<ul lang="shell">
  <li>
    <h4 id="homebrew">安装Homebrew</h4>
    <pre><code>ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)"
</code></pre>
  </li>
</ul>

<ul>
  <li>
    <h4 id="rvm">安装RVM</h4>

    <pre><code>  curl -L https://get.rvm.io | bash -s stable --ruby
</code></pre>

    <p>这里获取的是最新的ruby版本，目前我取下来的版本是2.0.0。如果需要使用1.9.3环境</p>

    <pre><code>  rvm install 1.9.3
  rvm use 1.9.3
  rvm rubygems latest
</code></pre>

    <p>搭建好RVM之后就可以正式开始搭建Octopress了。cd 到你想要保存octopress的目录下，然后在终	端输入：</p>

    <pre><code>  git clone git://github.com/imathis/octopress.git octopress
</code></pre>

    <p>下一步是安装相关的依赖：</p>

    <pre><code>  gem install bundler
  bundle install
</code></pre>

    <p>最后安装默认主题：</p>

    <pre><code>  rake install
</code></pre>

    <p>这样子octopress就算基本搭建好了，下面的步骤就是怎么上传到github上了。</p>
  </li>
</ul>

<p>小结: 在搭建环境的时候，发生了非常多的command not found的问题，直到我安装了homebrew + google所遇到的问题之后，一切迎刃而解了。</p>

<h2 id="octopress">配置Octopress</h2>
<p>首先在 Github 上创建一个由你自己的用户名组成的repo，如<code>yourusername.github.com</code>，注意这里必须是由你自己的user name 组成。然后第一次提	交会有两个分支，一个是<code>source</code>分支，一个是<code>master</code>分支。<code>source</code>管理博	客的源码，<code>master</code>分支用于管理生成的内容。Octopress的做法似乎是把<code>master</code>分	支对<code>source</code>下的<strong><em>source</em></strong>文件夹做了映射，然后每次都会deploy的时候都会把这个文	件夹提交到<code>master</code>。</p>

<p>创建好了repo之后就可以自动生成github的页面，输入：</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>然后终端会让你输入你Github上的repo地址，这里注意不要根据它给的样式输入，找到自己的仓库地址，格式是：<code>git@github.com:yourusername/yourusername.github.com.git</code>，这里如果输入错误，之后就提交不到仓库了，我在这里遇到了这个问题导致后面一直提交不上去，浪费了时间。</p>

<p>然后输入</p>

<pre><code>rake generate
rake deploy
</code></pre>

<p>最后把代码提交到仓库了</p>

<pre><code>git add .
git commit -m 'Initial octopress'
git push origin source
</code></pre>

<p>到了这一步，就可以在浏览器输入<code>yourusername.github.com</code>访问你的Github Pages了。</p>

<h2 id="section">发布文章</h2>
<p>输入</p>

<pre><code>rake new_post["title"]
</code></pre>

<p>就会在source/_post 文件夹生成一份年月日生成的markdown文件，我们就是通过这个来写文章的。写好文章之后，一般的步骤是</p>

<pre><code>rake generate
git add . 
git commit -i 'change log'	
git push origin source
rake deploy 这样就把文章发布到你的私人博客上了，easy!
</code></pre>

<h2 id="section-1">那些烦人的404</h2>
<p>提交代码到Github之后，但是仍不能访问页面，这里以我遇到的问题为例：</p>

<ul>
  <li>
    <h4 id="recognized-liquid-tag">recognized Liquid tag</h4>

    <blockquote>
      <p>The page build failed with the following error:
  The tag <code>include_array</code> in <code>source/index.html</code> is not a recognized Liquid 	tag.”
  and i just simply delete the code below and everything works fine in local 	preview.</p>
    </blockquote>

    <p>如果Github给你发邮件报这个问题，那很有可能你把整个source分支都提交到了master引起的错误。</p>
  </li>
  <li>
    <h4 id="submodule">submodule</h4>
    <p>如果你遇到了关于submodule的错误，比如在安装greyshade主题的时候。那么只要删除这个文件夹就好了</p>

    <pre><code>  git rm --cached .theme/greyshade
</code></pre>
  </li>
  <li>
    <h4 id="rejected-master---master-non-fast-forward">[rejected] master -&gt; master (non-fast-forward)</h4>
    <p>当提交到master的时候遇到这个问题，可以查看<a href="http://	stackoverflow.com/questions/17609453/rake-gen-deploy-rejected-in-octopress" title="Title">stackoverflow上的解决方案</a></p>
  </li>
</ul>

<h2 id="section-2">小结</h2>
<p>花了两天的时间，才把 Github Pages 搭建好了，有意思的是，原来对Ruby跟Git的完全不了解通过这两天的学习，也渐渐有点起色了。特别是对于Git的命令方面掌握了很多。感谢网上很多的Octopress教程，也是他们让我也想把自己搭建的过程分享出来，希望能节省一些人的时间。</p>
]]></content>
  </entry>
  
</feed>
